}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE=T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD=T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
}
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
}
Measures_of_Fit(practice.ys, practice.mat)
practice.ys
str(practice.ys)
class(practice.ys)
class(practice.ys) != c("numeric", "integer")
class(practice.ys) != "numeric" & class(true.ys) !="integer"
class(practice.ys) != "numeric" & class(practice.ys) !="integer"
class(practice.mat) != "numeric" & class(practice.mat) !="integer"
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer")){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
}
Measures_of_Fit(practice.ys, practice.mat)
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer")){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
}
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer")){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
}
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
}
Measures_of_Fit(practice.ys, practice.mat)
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
return(fit.statistics)
}
Measures_of_Fit(practice.ys, practice.mat)
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
fit.statistics <- fit.statistics[,-1]
return(fit.statistics)
}
Measures_of_Fit(practice.ys, practice.mat)
sqrt(mean((log(prediction.matrix[,i] + 1) - log(true.ys + 1))^2))
install.packages("Metrics")
library(Metrics)
rmsle(prediction.matrix[,i], true.ys)
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
sqrt(mean((log(prediction.matrix[,i] + 1) - log(true.ys + 1))^2))
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
# Function for calculating root mean squared log error (RMSLE)
RMSLE_Function <- function(i){
sqrt(mean((log(prediction.matrix[,i] + 1) - log(true.ys + 1))^2))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
if(RMSLE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSLE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSLE"
}
fit.statistics <- fit.statistics[,-1]
return(fit.statistics)
}
Measures_of_Fit(practice.ys, practice.mat)
(abs(prediction.matrix - true.ys) / abs(true.ys))
(sum(abs(prediction.matrix - true.ys)) / abs(true.ys))
(sum(abs(prediction.matrix[,i] - true.ys)) / abs(true.ys))
prediction.matrix[,i]
prediction.matrix[,i] - true.ys
abs(prediction.matrix[,i] - true.ys)
sum(abs(prediction.matrix[,i] - true.ys))
sum(abs(prediction.matrix[,i] - true.ys)) / abs(true.ys)
sum(abs(prediction.matrix[,i] - true.ys)) / length(true.ys)
(sum(abs(prediction.matrix[,i] - true.ys)) / length(true.ys)) * 100
abs(prediction.matrix[,i] - true.ys)
sum(abs(prediction.matrix[,i] - true.ys) * 100)
(sum(abs(prediction.matrix[,i] - true.ys) * 100) / length(true.ys))
abs(prediction.matrix[,i] - true.ys) / abs(true.ys)
(sum((abs(prediction.matrix[,i] - true.ys) / abs(true.ys)) * 100) / length(true.ys))
install.packages("DMwR")
library(MAPE_Function)
library(DMwR)
regr.eval(true.ys, prediction.matrix[,i], stats = c("mape"))
(sum((abs(prediction.matrix[,i] - true.ys) / abs(true.ys)) * 100) / length(true.ys))
(sum((abs(prediction.matrix[,i] - true.ys) / abs(true.ys) * 100)) / length(true.ys))
(sum((abs(prediction.matrix[,i] - true.ys) / abs(true.ys))* 100) / length(true.ys))
regr.eval(true.ys, prediction.matrix[,i], stats = c("mape", "rmsle"))
regr.eval(true.ys, prediction.matrix[,i], stats = c("mape", "rmse"))
regr.eval(true.ys, prediction.matrix[,i], stats = c("mape", "rmse", "mad"))
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
# Function for calculating root mean squared log error (RMSLE)
RMSLE_Function <- function(i){
sqrt(mean((log(prediction.matrix[,i] + 1) - log(true.ys + 1))^2))
}
# Function for calculating mean absolute percentage error (MAPE)
MAPE_Function <- function(i){
(sum((abs(prediction.matrix[,i] - true.ys) / abs(true.ys))* 100) / length(true.ys))
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
if(RMSLE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSLE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSLE"
}
if(MAPE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAPE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAPE"
}
fit.statistics <- fit.statistics[,-1]
return(fit.statistics)
}
Measures_of_Fit(practice.ys, practice.mat)
regr.eval(true.ys, prediction.matrix[,i], stats = c("mape", "rmse"))
median((abs(prediction.matrix[,i] - true.ys) / abs(true.ys)) * 100)
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Row",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
# Function for calculating root mean squared log error (RMSLE)
RMSLE_Function <- function(i){
sqrt(mean((log(prediction.matrix[,i] + 1) - log(true.ys + 1))^2))
}
# Function for calculating mean absolute percentage error (MAPE)
MAPE_Function <- function(i){
(sum((abs(prediction.matrix[,i] - true.ys) / abs(true.ys))* 100) / length(true.ys))
}
# Function for calculating MEAPE
MEAPE_Function <- function(i){
median((abs(prediction.matrix[,i] - true.ys) / abs(true.ys)) * 100)
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
if(RMSLE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSLE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSLE"
}
if(MAPE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAPE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAPE"
}
if(MEAPE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MEAPE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MEAPE"
}
fit.statistics <- fit.statistics[,-1]
return(fit.statistics)
}
Measures_of_Fit(practice.ys, practice.mat)
Measures_of_Fit <- function(true.ys=c(), prediction.matrix=matrix(), RMSE=T, MAD=T, RMSLE=T, MAPE=T,
MEAPE=T){
if(class(true.ys) != "numeric" & class(true.ys) !="integer"){
stop("Your true.ys values are invalid. Please pass the function a vector of observed Y values in numeric format.")
}
if(class(prediction.matrix) != "matrix"){
stop("Your prediciton.matrix is invalid. Please pass the function a matrix of predictions.")
}
if(dim(prediction.matrix)[1] != length(true.ys)){
stop("Each column of your prediction matrix should correspond to a prediction for each of
the values of Y specified in the true.ys vector. Ensure the number of rows in your
prediction matrix equals the number of Y observations.")
}
fit.statistics <- matrix(data=NA, nrow=dim(prediction.matrix)[2])
rownames(fit.statistics) <- sapply(1:dim(prediction.matrix)[2], FUN=function(i)paste("Model",i))
# Function for calculating RMSE
RMSE_Function <- function(i){
sqrt(mean(abs(prediction.matrix[,i] - true.ys)^2))
}
# Function for calculating MAD
MAD_Function <- function(i){
median(abs(prediction.matrix[,i] - true.ys))
}
# Function for calculating root mean squared log error (RMSLE)
RMSLE_Function <- function(i){
sqrt(mean((log(prediction.matrix[,i] + 1) - log(true.ys + 1))^2))
}
# Function for calculating mean absolute percentage error (MAPE)
MAPE_Function <- function(i){
(sum((abs(prediction.matrix[,i] - true.ys) / abs(true.ys))* 100) / length(true.ys))
}
# Function for calculating MEAPE
MEAPE_Function <- function(i){
median((abs(prediction.matrix[,i] - true.ys) / abs(true.ys)) * 100)
}
if(RMSE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSE"
}
if(MAD==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAD_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAD"
}
if(RMSLE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=RMSLE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "RMSLE"
}
if(MAPE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MAPE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MAPE"
}
if(MEAPE==T){
fit.statistics <- cbind(fit.statistics,sapply(1:dim(prediction.matrix)[2], FUN=MEAPE_Function))
colnames(fit.statistics)[dim(fit.statistics)[2]] <- "MEAPE"
}
fit.statistics <- fit.statistics[,-1]
return(fit.statistics)
}
Measures_of_Fit(practice.ys, practice.mat)
